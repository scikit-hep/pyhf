[build-system]
requires = [
    "hatchling>=1.3.1",
    "hatch-vcs",
]
build-backend = "hatchling.build"

[project]
name = "pyhf"
description = "pure-Python HistFactory implementation with tensors and autodiff"
readme = "README.rst"
license = { file = "LICENSE" }
requires-python = ">=3.7"
keywords = [
    "fitting",
    "jax",
    "numpy",
    "physics",
    "pytorch",
    "scipy",
    "tensorflow",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python :: 3.10",
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: Physics",
]
dependencies = [
    "click>=7.0",  # for console scripts
    "importlib_resources>=1.3.0; python_version < \"3.9\"",  # for resources in schema
    "jsonpatch>=1.15",
    "jsonschema>=3.0.0",  # for utils
    "pyyaml>=5.1",  # for parsing CLI equal-delimited options
    "scipy>=1.1.0", # requires numpy, which is required by pyhf and tensorflow
    "tqdm>=4.56.0"  # for readxml
]
dynamic = [
    "version",
]
authors = [
    { name = "Lukas Heinrich", email = "lukas.heinrich@cern.ch" },
    { name = "Matthew Feickert", email = "matthew.feickert@cern.ch"}, 
    { name = "Giordon Stark", email = "gstark@cern.ch" }
]

[project.optional-dependencies]
backends = [
    "iminuit>=2.4.0",
    "jax>=0.2.10",
    "jaxlib>=0.1.60,!=0.1.68",
    "tensorflow-probability>=0.11.0",
    "tensorflow>=2.6.5",
    "torch>=1.10.0",
]
complete = [
    "black>=22.1.0",
    "check-manifest",
    "click_completion",
    "codemetapy>=0.3.4",
    "flake8",
    "graphviz",
    "iminuit>=2.4.0",
    "ipython",
    "ipywidgets",
    "jax>=0.2.10",
    "jaxlib>=0.1.60,!=0.1.68",
    "jupyter",
    "matplotlib",
    "nbdime",
    "nbsphinx!=0.8.8",
    "papermill~=2.3.4",
    "pre-commit",
    "pydocstyle",
    "pytest-benchmark[histogram]",
    "pytest-console-scripts",
    "pytest-cov>=2.5.1",
    "pytest-mock",
    "pytest-mpl",
    "pytest>=6.0",
    "requests",
    "requests-mock>=1.9.0",
    "scikit-hep-testdata>=0.4.11",
    "scrapbook~=0.5.0",
    "sphinx-click",
    "sphinx-copybutton>=0.3.2",
    "sphinx-issues",
    "sphinx-togglebutton>=0.3.0",
    "sphinx>=4.0.0",
    "sphinx_rtd_theme",
    "sphinxcontrib-bibtex~=2.1",
    "tbump>=6.7.0",
    "tensorflow-probability>=0.11.0",
    "tensorflow>=2.6.5",
    "torch>=1.10.0",
    "twine",
    "uproot>=4.1.1",
]
contrib = [
    "matplotlib",
    "requests",
]
develop = [
    "black>=22.1.0",
    "check-manifest",
    "click_completion",
    "codemetapy>=0.3.4",
    "flake8",
    "graphviz",
    "iminuit>=2.4.0",
    "ipython",
    "ipywidgets",
    "jax>=0.2.10",
    "jaxlib>=0.1.60,!=0.1.68",
    "jupyter",
    "matplotlib",
    "nbdime",
    "nbsphinx!=0.8.8",
    "papermill~=2.3.4",
    "pre-commit",
    "pydocstyle",
    "pytest-benchmark[histogram]",
    "pytest-console-scripts",
    "pytest-cov>=2.5.1",
    "pytest-mock",
    "pytest-mpl",
    "pytest>=6.0",
    "requests",
    "requests-mock>=1.9.0",
    "scikit-hep-testdata>=0.4.11",
    "scrapbook~=0.5.0",
    "sphinx-click",
    "sphinx-copybutton>=0.3.2",
    "sphinx-issues",
    "sphinx-togglebutton>=0.3.0",
    "sphinx>=4.0.0",
    "sphinx_rtd_theme",
    "sphinxcontrib-bibtex~=2.1",
    "tbump>=6.7.0",
    "tensorflow-probability>=0.11.0",
    "tensorflow>=2.6.5",
    "torch>=1.10.0",
    "twine",
    "uproot>=4.1.1",
]
docs = [
    "ipywidgets",
    "matplotlib",
    "nbsphinx!=0.8.8",
    "requests",
    "sphinx-click",
    "sphinx-copybutton>=0.3.2",
    "sphinx-issues",
    "sphinx-togglebutton>=0.3.0",
    "sphinx>=4.0.0",
    "sphinx_rtd_theme",
    "sphinxcontrib-bibtex~=2.1",
    "uproot>=4.1.1",
]
jax = [
    "jax>=0.2.10",
    "jaxlib>=0.1.60,!=0.1.68",
]
lint = [
    "black>=22.1.0",
    "flake8",
]
minuit = [
    "iminuit>=2.4.0",
]
shellcomplete = [
    "click_completion",
]
tensorflow = [
    "tensorflow-probability>=0.11.0",
    "tensorflow>=2.6.5",
]
test = [
    "click_completion",
    "graphviz",
    "iminuit>=2.4.0",
    "jax>=0.2.10",
    "jaxlib>=0.1.60,!=0.1.68",
    "jupyter",
    "matplotlib",
    "papermill~=2.3.4",
    "pydocstyle",
    "pytest-benchmark[histogram]",
    "pytest-console-scripts",
    "pytest-cov>=2.5.1",
    "pytest-mock",
    "pytest-mpl",
    "pytest>=6.0",
    "requests",
    "requests-mock>=1.9.0",
    "scikit-hep-testdata>=0.4.11",
    "scrapbook~=0.5.0",
    "tensorflow-probability>=0.11.0",
    "tensorflow>=2.6.5",
    "torch>=1.10.0",
    "uproot>=4.1.1",
]
torch = [
    "torch>=1.10.0",
]
xmlio = [
    "uproot>=4.1.1",
]

[project.scripts]
pyhf = "pyhf.cli:cli"

[project.urls]
"Documentation" = "https://pyhf.readthedocs.io/"
"Homepage" = "https://github.com/scikit-hep/pyhf"
"Issue Tracker" = "https://github.com/scikit-hep/pyhf/issues"
"Release Notes" = "https://pyhf.readthedocs.io/en/stable/release-notes.html"
"Source Code" = "https://github.com/scikit-hep/pyhf"

# Give Hatch the ability to determine the project version
[tool.hatch.version]
source = "vcs"

# Generate _version.py at build time
[tool.hatch.build.hooks.vcs]
version-file = "src/pyhf/_version.py"

[tool.hatch.build]
packages = [
    "src/pyhf"
]


[tool.black]
line-length = 88
target-version = [
    "py37",
    "py38",
]
skip-string-normalization = true
include = "\\.pyi?$"
exclude = "/(\n    \\.git\n  | .eggs\n  | build\n)/\n"

[tool.check-manifest]
ignore = [
    "docs*",
    "validation*",
    "examples*",
    "tests*",
    "docker*",
    "binder*",
    ".*",
    "pyproject.toml",
    "pytest.ini",
    "codecov.yml",
    "codemeta.json",
    "CODE_OF_CONDUCT.md",
    "CONTRIBUTING.md",
    "AUTHORS",
]

[tool.pytest.ini_options]
minversion = "6.0"
xfail_strict = true
addopts = [
    "-ra",
    "--cov=pyhf",
    "--cov-branch",
    "--showlocals",
    "--strict-markers",
    "--strict-config",
    "--cov-report=term-missing",
    "--cov-report=xml",
    "--cov-report=html",
    "--doctest-modules",
    "--doctest-glob='*.rst'",
]
log_cli_level = "info"
testpaths = "tests"
markers = [
    "fail_jax",
    "fail_numpy",
    "fail_numpy_minuit",
    "fail_pytorch",
    "fail_pytorch64",
    "fail_tensorflow",
    "only_jax",
    "only_numpy",
    "only_numpy_minuit",
    "only_pytorch",
    "only_pytorch64",
    "only_tensorflow",
    "skip_jax",
    "skip_numpy",
    "skip_numpy_minuit",
    "skip_pytorch",
    "skip_pytorch64",
    "skip_tensorflow",
]
filterwarnings = [
    "error",
    "ignore:the imp module is deprecated:DeprecationWarning",
    "ignore:distutils Version classes are deprecated:DeprecationWarning",
    "ignore:the `interpolation=` argument to percentile was renamed to `method=`, which has additional options:DeprecationWarning",
    "ignore:The interpolation= argument to 'quantile' is deprecated. Use 'method=' instead:DeprecationWarning",
    "ignore: Exception ignored in:pytest.PytestUnraisableExceptionWarning",
    "ignore:invalid value encountered in (true_)?divide:RuntimeWarning",
    "ignore:invalid value encountered in add:RuntimeWarning",
    "ignore:In future, it will be an error for 'np.bool_' scalars to be interpreted as an index:DeprecationWarning",
    "ignore:Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with:UserWarning",
    "ignore:divide by zero encountered in (true_)?divide:RuntimeWarning",
    "ignore:[A-Z]+ is deprecated and will be removed in Pillow 10:DeprecationWarning",
]

[tool.nbqa.mutate]
pyupgrade = 1

[tool.nbqa.addopts]
pyupgrade = [
    "--py37-plus",
]
